// package main

// import "fmt"

// type node struct {
// 	data int
// 	next *node
// }

// type linkedList struct {
// 	head   *node
// 	length int
// }

// func (l *linkedList) prepend(n *node) {
// 	second := l.head
// 	l.head = n
// 	l.head.next = second
// 	l.length++
// }

// func (l linkedList) printListData() {
// 	toPrint := l.head
// 	for l.length != 0 {
// 		fmt.Printf("%d ", toPrint.data)
// 		toPrint = toPrint.next
// 		l.length--
// 	}
// 	fmt.Printf("\n")
// }

// func (l *linkedList) deleteWithValue(value int) {
// 	if l.length == 0 {
// 		return
// 	}

// 	if l.head.data == value {
// 		l.head = l.head.next
// 		l.length--
// 		return
// 	}

// 	previousToDelete := l.head
// 	for previousToDelete.next.data != value {
// 		if previousToDelete.next.next == nil {
// 			return
// 		}
// 		previousToDelete = previousToDelete.next
// 	}
// 	previousToDelete.next = previousToDelete.next.next
// 	l.length--
// }

// func main() {
// 	mylist := linkedList{}
// 	node1 := &node{data: 48}
// 	node2 := &node{data: 18}
// 	node3 := &node{data: 16}
// 	node4 := &node{data: 11}
// 	node5 := &node{data: 7}
// 	node6 := &node{data: 2}
// 	mylist.prepend(node1)
// 	mylist.prepend(node2)
// 	mylist.prepend(node3)
// 	mylist.prepend(node4)
// 	mylist.prepend(node5)
// 	mylist.prepend(node6)
// 	mylist.printListData()

// 	mylist.deleteWithValue(100)
// 	mylist.deleteWithValue(2)
// 	mylist.printListData()
// 	emptyList := linkedList{}
// 	emptyList.deleteWithValue(10)

// }

package main
 
import "fmt"
 
type Node struct {
    prev *Node
    next *Node
    key  interface{}
}
 
type List struct {
    head *Node
    tail *Node
}
 
func (L *List) Insert(key interface{}) {
    list := &Node{
        next: L.head,
        key:  key,
    }
    if L.head != nil {
        L.head.prev = list
    }
    L.head = list
 
    l := L.head
    for l.next != nil {
        l = l.next
    }
    L.tail = l
}
 
func (l *List) Display() {
    list := l.head
    for list != nil {
        fmt.Printf("%+v ->", list.key)
        list = list.next
    }
    fmt.Println()
}
 
func Display(list *Node) {
    for list != nil {
        fmt.Printf("%v ->", list.key)
        list = list.next
    }
    fmt.Println()
}
 
func ShowBackwards(list *Node) {
    for list != nil {
        fmt.Printf("%v <-", list.key)
        list = list.prev
    }
    fmt.Println()
}
 
func (l *List) Reverse() {
    curr := l.head
    var prev *Node
    l.tail = l.head
 
    for curr != nil {
        next := curr.next
        curr.next = prev
        prev = curr
        curr = next
    }
    l.head = prev
    Display(l.head)
}
 
func main() {
    link := List{}
    link.Insert(5)
    link.Insert(9)
    link.Insert(13)
    link.Insert(22)
    link.Insert(28)
    link.Insert(36)
     
    fmt.Println("\n==============================\n")
    fmt.Printf("Head: %v\n", link.head.key)
    fmt.Printf("Tail: %v\n", link.tail.key)
    link.Display()
    fmt.Println("\n==============================\n")
    fmt.Printf("head: %v\n", link.head.key)
    fmt.Printf("tail: %v\n", link.tail.key)
    link.Reverse()
    fmt.Println("\n==============================\n")
}